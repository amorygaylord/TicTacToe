type: edu
custom_name: stage3
files:
- name: src/tictactoe/Main.java
  visible: true
  text: |
    package tictactoe;

    public class Main {
        public static void main(String[] args) {
            // write your code here
        }
    }
  learner_created: false
- name: test/TicTacToeTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import tictactoe.Main;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.stream.Collectors;

    enum FieldState {
        X, O, FREE;

        static FieldState get(char symbol) {
            switch (symbol) {
                case 'X': return X;
                case 'O': return O;
                case ' ':
                case '_':
                    return FREE;
                default: return null;
            }
        }
    }

    class TicTacToeField {

        final FieldState[][] field;

        TicTacToeField(FieldState[][] field) {
            this.field = new FieldState[3][3];
            for (int row = 0; row < 3; row++) {
                for (int col = 0; col < 3; col++) {
                    this.field[row][col] = field[row][col];
                }
            }
        }

        TicTacToeField(String str) {
            field = new FieldState[3][3];
            str = str.replace("\"", "");

            for (int row = 0; row < 3; row++) {
                for (int col = 0; col < 3; col++) {
                    field[row][col] =
                        FieldState.get(str.charAt(((2 - row) * 3 + col)));
                }
            }
        }

        boolean equalTo(TicTacToeField other) {
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (field[i][j] != other.field[i][j]) {
                        return false;
                    }
                }
            }
            return true;
        }

        boolean hasNextAs(TicTacToeField other) {
            boolean improved = false;
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (field[i][j] != other.field[i][j]) {
                        if (field[i][j] == FieldState.FREE && !improved) {
                            improved = true;
                        }
                        else {
                            return false;
                        }
                    }
                }
            }
            return improved;
        }

        boolean isCloseTo(TicTacToeField other) {
            return equalTo(other)
                || hasNextAs(other)
                || other.hasNextAs(this);
        }

        static TicTacToeField parse(String fieldStr) {

            try {
                List<String> lines = fieldStr
                    .lines()
                    .map(String::strip)
                    .filter(e ->
                        e.startsWith("|")
                            && e.endsWith("|"))
                    .collect(Collectors.toList());

                for (String line : lines) {
                    if (line.length() != 9) {
                        throw new WrongAnswer("Line of Tic-Tac-Toe " +
                            "field should be 9 characters long\n" +
                            "found " + line.length() + " characters in \"" + line + "\"");
                    }
                    for (char c : line.toCharArray()) {
                        if (c != 'X'
                            && c != 'O'
                            && c != '|'
                            && c != ' '
                            && c != '_') {
                            return null;
                        }
                    }
                }

                FieldState[][] field = new FieldState[3][3];

                int y = 2;
                for (String line : lines) {
                    char[] cols = new char[] {
                        line.charAt(2),
                        line.charAt(4),
                        line.charAt(6)
                    };

                    int x = 0;
                    for (char c : cols) {
                        FieldState state = FieldState.get(c);
                        if (state == null) {
                            return null;
                        }
                        field[y][x] = state;
                        x++;
                    }
                    y--;
                }

                return new TicTacToeField(field);
            } catch (Exception ex) {
                return null;
            }
        }


        static List<TicTacToeField> parseAll(String output) {
            List<TicTacToeField> fields = new ArrayList<>();

            List<String> lines = output
                .lines()
                .map(String::strip)
                .filter(e -> e.length() > 0)
                .collect(Collectors.toList());

            String candidateField = "";
            boolean insideField = false;
            for (String line : lines) {
                if (line.contains("----") && !insideField) {
                    insideField = true;
                    candidateField = "";
                } else if (line.contains("----") && insideField) {
                    TicTacToeField field = TicTacToeField.parse(candidateField);
                    if (field != null) {
                        fields.add(field);
                    }
                    insideField = false;
                }

                if (insideField && line.startsWith("|")) {
                    candidateField += line + "\n";
                }
            }

            return fields;
        }

    }


    class Clue {
        int x, y;
        Clue(int x, int y) {
            this.x = x;
            this.y = y;
        }
    }

    public class TicTacToeTest extends StageTest<Clue> {
        public TicTacToeTest() throws Exception {
            super(Main.class);
        }

        static String[] inputs = new String[] {
            "1 1", "1 2", "1 3",
            "2 1", "2 2", "2 3",
            "3 1", "3 2", "3 3"
        };

        String iterateCells(String initial) {
            int index = -1;
            for (int i = 0; i < inputs.length; i++) {
                if (initial.equals(inputs[i])) {
                    index = i;
                    break;
                }
            }
            if (index == -1) {
                return "";
            }
            String fullInput = "";
            for (int i = index; i < index + 9; i++) {
                fullInput += inputs[i % inputs.length] + "\n";
            }
            return fullInput;
        }

        @Override
        public List<TestCase<Clue>> generate() {

            List<TestCase<Clue>> tests = new ArrayList<>();

            int i = 0;
            for (String input : inputs) {
                String fullMoveInput = iterateCells(input);

                String[] strNums = input.split(" ");
                int x = Integer.parseInt(strNums[0]);
                int y = Integer.parseInt(strNums[1]);

                if (i % 2 == 1) {
                    // mix with incorrect data
                    fullMoveInput = "4 " + i + "\n" + fullMoveInput;
                }

                String fullGameInput = "";
                for (int j = 0; j < 9; j++) {
                    fullGameInput += fullMoveInput;
                }

                String initial;
                if (i % 2 == 0) {
                    initial = "start user easy\n";
                } else {
                    initial = "start easy user\n";
                }

                fullGameInput = initial + fullGameInput + "exit";

                tests.add(new TestCase<Clue>()
                    .setInput(fullGameInput));

                i++;
            }

            tests.add(new TestCase<Clue>()
                .setInput("start easy easy\nexit"));

            tests.add(new TestCase<Clue>()
                .setInput("start user user\n" +
                    "1 1\n" +
                    "2 2\n" +
                    "1 2\n" +
                    "2 1\n" +
                    "1 3\n" +
                    "exit"));

            return tests;
        }

        @Override
        public CheckResult check(String reply, Clue clue) {

            List<TicTacToeField> fields = TicTacToeField.parseAll(reply);

            if (fields.size() == 0) {
                return new CheckResult(false, "No fields found");
            }

            for (int i = 1; i < fields.size(); i++) {
                TicTacToeField curr = fields.get(i - 1);
                TicTacToeField next = fields.get(i);

                if (!(curr.equalTo(next) || curr.hasNextAs(next))) {
                    return new CheckResult(false,
                        "For two fields following each " +
                            "other one is not a continuation " +
                            "of the other (they differ more than in two places).");
                }
            }

            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/tictactoe/Stage1Tictactoe.java
  visible: true
  text: |+
    package tictactoe;

    public class Stage1Tictactoe {
        /* enum Value {
            X('X'),
            O('O'),
            BLANK('_');

            private char charVal;

            Value(final char charVal) {
                this.charVal = charVal;
            }

            public char charVal() {
                return charVal;
            }
        }

        enum BoardLocation {
            ONE_THREE("1 3", 1.3, 0, 0),
            TWO_THREE("2 3", 2.3, 0, 1),
            THREE_THREE("3 3", 3.3, 0, 2),
            ONE_TWO("1 2", 1.2,1, 0),
            TWO_TWO("2 2", 2.2, 1, 1),
            THREE_TWO("3 2", 3.2, 1, 2),
            ONE_ONE("1 1", 1.1, 2, 0),
            TWO_ONE("2 1", 2.2, 2, 1),
            THREE_ONE("3 1", 3.1, 2, 2),
            DEFAULT("0 0", 0,0,0);

            private String coordinate;
            private double value;
            private int rowIndex;
            private int columnIndex;

            BoardLocation(final String coordinate, final double value, final int rowIndex, final int columnIndex) {
                this.coordinate = coordinate;
                this.value = value;
                this.rowIndex = rowIndex;
                this.columnIndex = columnIndex;
            }

            public String coordinate() {
                return coordinate;
            }

            public double value() {
                return value;
            }

            public int rowIndex() {
                return rowIndex;
            }

            public int columnIndex() {
                return columnIndex;
            }

            public static BoardLocation getLocation(int x, int y) {
                BoardLocation location = DEFAULT;
                String coordinate = x + " " + y;
                switch (coordinate) {
                    case "1 3":
                        location = ONE_THREE;
                        break;
                    case "2 3":
                        location = TWO_THREE;
                        break;
                    case "3 3":
                        location = THREE_THREE;
                        break;
                    case "1 2":
                        location = ONE_TWO;
                        break;
                    case "2 2":
                        location = TWO_TWO;
                        break;
                    case "3 2":
                        location = THREE_TWO;
                        break;
                    case "1 1":
                        location = ONE_ONE;
                        break;
                    case "2 1":
                        location = TWO_ONE;
                        break;
                    case "3 1":
                        location = THREE_ONE;
                        break;
                    default:
                }
                return location;
            }
        }

        enum GameState {
            START("", false),
            IN_PROGRESS("", false),
            INCOMPLETE("Game not finished", true),
            DRAW("Draw", true),
            X_WIN("X wins", true),
            O_WIN("O wins", true);

            private final String sysOutput;
            private final Boolean gameOver;

            GameState(final String sysOutput, final Boolean gameOver) {
                this.sysOutput = sysOutput;
                this.gameOver = gameOver;
            }

            public String sysOutput() {
                return sysOutput;
            }

            public Boolean gameOver() {
                return gameOver;
            }
        }

        public static char[][] generateBoard(String input)
        {
            char[][] board = new char[3][3];
            int indexing = 0;

            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    board[i][j] = input.charAt(indexing);
                    indexing++;
                }
            }
            return board;
        }

        public static void printBoard(char[][] board)
        {
            String line = "| ";

            System.out.println("---------");

            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    line = line + board[i][j] + " ";
                }
                System.out.println(line + "|");
                line = "| ";
            }

            System.out.println("---------");
        }

        public static Boolean checkForCompletion(char[][] board)
        {
            boolean complete = true;

            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (board[i][j] == '_') {
                        complete = false;
                    }
                }
            }

            return complete;
        }

         */
    }

  learner_created: true
- name: src/tictactoe/Tictactoe.java
  visible: true
  text: "package tictactoe;\n\npublic class Tictactoe {\n    enum Value {\n      \
    \  X('X'),\n        O('O'),\n        BLANK('_');\n\n        private char charVal;\n\
    \n        Value(final char charVal) {\n            this.charVal = charVal;\n \
    \       }\n\n        public char charVal() {\n            return charVal;\n  \
    \      }\n    }\n\n    enum Player {\n        PLAYER_X,\n        PLAYER_O;\n \
    \       \n        private \n        \n        Player() {\n            \n     \
    \   }\n        \n        \n    }\n    \n    enum BoardLocation {\n        ONE_THREE(\"\
    1 3\", 0, 0, 0),\n        TWO_THREE(\"2 3\", 1, 0, 1),\n        THREE_THREE(\"\
    3 3\", 2, 0, 2),\n        ONE_TWO(\"1 2\", 3, 1, 0),\n        TWO_TWO(\"2 2\"\
    , 4, 1, 1),\n        THREE_TWO(\"3 2\", 5, 1, 2),\n        ONE_ONE(\"1 1\", 6,\
    \ 2, 0),\n        TWO_ONE(\"2 1\", 7, 2, 1),\n        THREE_ONE(\"3 1\", 8, 2,\
    \ 2),\n        DEFAULT(\"0 0\", 10, 5, 5);\n\n        private String coordinate;\n\
    \        private double value;\n        private int rowIndex;\n        private\
    \ int columnIndex;\n\n        BoardLocation(final String coordinate, final double\
    \ value, final int rowIndex, final int columnIndex) {\n            this.coordinate\
    \ = coordinate;\n            this.value = value;\n            this.rowIndex =\
    \ rowIndex;\n            this.columnIndex = columnIndex;\n        }\n\n      \
    \  public String coordinate() {\n            return coordinate;\n        }\n\n\
    \        public double value() {\n            return value;\n        }\n\n   \
    \     public int rowIndex() {\n            return rowIndex;\n        }\n\n   \
    \     public int columnIndex() {\n            return columnIndex;\n        }\n\
    \n        public static BoardLocation locationFromValue(int val) {\n         \
    \   BoardLocation location = DEFAULT;\n\n            switch (val) {\n        \
    \        case 0:\n                    location = ONE_THREE;\n                \
    \    break;\n                case 1:\n                    location = TWO_THREE;\n\
    \                    break;\n                case 2:\n                    location\
    \ = THREE_THREE;\n                    break;\n                case 3:\n      \
    \              location = ONE_TWO;\n                    break;\n             \
    \   case 4:\n                    location = TWO_TWO;\n                    break;\n\
    \                case 5:\n                    location = THREE_TWO;\n        \
    \            break;\n                case 6:\n                    location = ONE_ONE;\n\
    \                    break;\n                case 7:\n                    location\
    \ = TWO_ONE;\n                    break;\n                case 8:\n          \
    \          location = THREE_ONE;\n                    break;\n            }\n\n\
    \            return location;\n        }\n\n        public static BoardLocation\
    \ getLocation(int x, int y) {\n            BoardLocation location = DEFAULT;\n\
    \            String coordinate = x + \" \" + y;\n            switch (coordinate)\
    \ {\n                case \"1 3\":\n                    location = ONE_THREE;\n\
    \                    break;\n                case \"2 3\":\n                 \
    \   location = TWO_THREE;\n                    break;\n                case \"\
    3 3\":\n                    location = THREE_THREE;\n                    break;\n\
    \                case \"1 2\":\n                    location = ONE_TWO;\n    \
    \                break;\n                case \"2 2\":\n                    location\
    \ = TWO_TWO;\n                    break;\n                case \"3 2\":\n    \
    \                location = THREE_TWO;\n                    break;\n         \
    \       case \"1 1\":\n                    location = ONE_ONE;\n             \
    \       break;\n                case \"2 1\":\n                    location =\
    \ TWO_ONE;\n                    break;\n                case \"3 1\":\n      \
    \              location = THREE_ONE;\n                    break;\n           \
    \     default:\n            }\n            return location;\n        }\n    }\n\
    \n    enum GameState {\n        START(\"\", false),\n        IN_PROGRESS(\"\"\
    , false),\n        DRAW(\"Draw\", true),\n        X_WIN(\"X wins\", true),\n \
    \       O_WIN(\"O wins\", true);\n\n        private final String sysOutput;\n\
    \        private final Boolean gameOver;\n\n        GameState(final String sysOutput,\
    \ final Boolean gameOver) {\n            this.sysOutput = sysOutput;\n       \
    \     this.gameOver = gameOver;\n        }\n\n        public String sysOutput()\
    \ {\n            return sysOutput;\n        }\n\n        public Boolean gameOver()\
    \ {\n            return gameOver;\n        }\n    }\n\n    public static char[][]\
    \ generateBoard() {\n        char[][] board = new char[3][3];\n\n        for (int\
    \ i = 0; i < 3; i++) {\n            for (int j = 0; j < 3; j++) {\n          \
    \      board[i][j] = ' ';\n            }\n        }\n        return board;\n \
    \   }\n\n    public static void printBoard(char[][] board) {\n        String line\
    \ = \"| \";\n\n        System.out.println(\"---------\");\n\n        for (int\
    \ i = 0; i < 3; i++) {\n            for (int j = 0; j < 3; j++) {\n          \
    \      line = line + board[i][j] + \" \";\n            }\n            System.out.println(line\
    \ + \"|\");\n            line = \"| \";\n        }\n\n        System.out.println(\"\
    ---------\");\n    }\n\n    public static boolean checkForCompletion(char[][]\
    \ board) {\n        boolean gameOver = true;\n\n        for (int i = 0; i < 3;\
    \ i++) {\n            for (int j = 0; j < 3; j++) {\n                if (board[i][j]\
    \ == ' ') {\n                    gameOver = false;\n                }\n      \
    \      }\n        }\n\n        return gameOver;\n    }\n}\n"
  learner_created: true
- name: src/tictactoe/Stage1.java
  visible: true
  text: |
    package tictactoe;
    import java.util.Scanner;
    import tictactoe.Tictactoe.GameState;
    import tictactoe.Tictactoe.BoardLocation;

    public class Stage1 {
        /* public static char[][] board = new char[3][3];
        public static GameState state = GameState.START;
        public static Boolean successful = false;

        public static Boolean systemIsO(String line) {
            Boolean systemIsO = false;
            int numOfXs = 0;
            int numOfOs = 0;

            for (int i = 0; i < 9; i++) {
                char val = line.charAt(i);

                switch (val) {
                    case 'X':
                        numOfXs++;
                        break;
                    case 'O':
                        numOfOs++;
                        break;
                    default:
                        break;
                }
            }
            if (numOfXs <= numOfOs) {
                systemIsO = true;
            }
            return systemIsO;
        }

        public static void askForInput() {
            switch (state) {
                case START:
                    System.out.println("Enter cells:");
                    state = GameState.IN_PROGRESS;
                    break;
                case IN_PROGRESS:
                    System.out.println("Enter the coordinates:");
                    break;
                default:
                    break;
            }
        }

        public static void determineWinner(int counterO, int counterX) {
            if (counterX == 3) {
                state = GameState.X_WIN;
                return;
            } else if (counterO == 3) {
                state = GameState.O_WIN;
                return;
            } else if (Tictactoe.checkForCompletion(board)) {
                state = GameState.DRAW;
            } else {
                state = GameState.IN_PROGRESS;
            }
        }

        public static void determineState() {
            // check: diagonal 1, diagonal 2, column 1, column 2, column 3, row 1, row 2, row 3
            int counterX = 0;
            int counterO = 0;

            //check rows
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (board[i][j] == 'X') {
                        counterX++;
                    } else if (board[i][j] == 'O') {
                        counterO++;
                    }
                }
                determineWinner(counterO, counterX);
                if (state.gameOver()) {
                    return;
                }

                counterO = 0;
                counterX = 0;
            }

            //check columns
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (board[j][i] == 'X') {
                        counterX++;
                    } else if (board[j][i] == 'O') {
                        counterO++;
                    }
                }
                determineWinner(counterO, counterX);
                if (state.gameOver()) {
                    return;
                }
                counterO = 0;
                counterX = 0;
            }

            //check diagonal 1
            counterO = 0;
            counterX = 0;

            if (board[BoardLocation.ONE_THREE.rowIndex()][BoardLocation.ONE_THREE.columnIndex()] == 'X') {
                counterX++;
            } else if (board[BoardLocation.ONE_THREE.rowIndex()][BoardLocation.ONE_THREE.columnIndex()] == 'O') {
                counterO++;
            }

            if (board[BoardLocation.TWO_TWO.rowIndex()][BoardLocation.TWO_TWO.columnIndex()] == 'X') {
                counterX++;
            } else if (board[BoardLocation.TWO_TWO.rowIndex()][BoardLocation.TWO_TWO.columnIndex()] == 'O') {
                counterO++;
            }

            if (board[BoardLocation.THREE_ONE.rowIndex()][BoardLocation.THREE_ONE.columnIndex()] == 'X') {
                counterX++;
            } else if (board[BoardLocation.THREE_ONE.rowIndex()][BoardLocation.THREE_ONE.columnIndex()] == 'O') {
                counterO++;
            }

            determineWinner(counterO, counterX);
            if (state.gameOver()) {
                return;
            }

            //check diagonal 2

            counterO = 0;
            counterX = 0;

            if (board[BoardLocation.THREE_THREE.rowIndex()][BoardLocation.THREE_THREE.columnIndex()] == 'X') {
                counterX++;
            } else if (board[BoardLocation.THREE_THREE.rowIndex()][BoardLocation.THREE_THREE.columnIndex()] == 'O') {
                counterO++;
            }

            if (board[BoardLocation.TWO_TWO.rowIndex()][BoardLocation.TWO_TWO.columnIndex()] == 'X') {
                counterX++;
            } else if (board[BoardLocation.TWO_TWO.rowIndex()][BoardLocation.TWO_TWO.columnIndex()] == 'O') {
                counterO++;
            }

            if (board[BoardLocation.ONE_ONE.rowIndex()][BoardLocation.ONE_ONE.columnIndex()] == 'X') {
                counterX++;
            } else if (board[BoardLocation.ONE_ONE.rowIndex()][BoardLocation.ONE_ONE.columnIndex()] == 'O') {
                counterO++;
            }

            determineWinner(counterO, counterX);
            if (state.gameOver()) {
                return;
            } else {
                state = GameState.INCOMPLETE;
            }
        }

        public static void respondToInput(Boolean playerIsX, int x, int y) {
            if (x > 3 || x < 1 || y > 3 || y < 1) {
                System.out.println("Coordinates should be from 1 to 3!");
                return;
            }

            BoardLocation location = BoardLocation.getLocation(x, y);

            char valAtLocation = board[location.rowIndex()][location.columnIndex()];
            if (valAtLocation != '_') {
                System.out.println("This cell is occupied! Choose another one!");
                return;
            } else {
                if (playerIsX) {
                    board[location.rowIndex()][location.columnIndex()] = 'X';
                } else {
                    board[location.rowIndex()][location.columnIndex()] = 'O';
                }
            }

            successful = true;
        }

        public static void main(String[] args) {
            Scanner scanner = new Scanner(System.in);

            askForInput();
            String inputLine = scanner.nextLine();
            board = Tictactoe.generateBoard(inputLine);
            Boolean playerIsX = systemIsO(inputLine);

            //game loop would begin here (for statement based on GameState state)

            Tictactoe.printBoard(board);

            while (true) {
                askForInput();
                String nextLine = scanner.nextLine();
                Boolean containsString = false;
                Boolean withinRange = false;

                if (nextLine.contains("o") || nextLine.contains("e")) {
                    System.out.println("You should enter numbers!");
                } else if (nextLine.contains("1") || nextLine.contains("2") || nextLine.contains("3")){
                    char X = nextLine.charAt(0);
                    char Y = nextLine.charAt(2);
                    int x = Integer.parseInt(String.valueOf(X));
                    int y = Integer.parseInt(String.valueOf(Y));
                    respondToInput(playerIsX, x, y);
                    if (successful) {
                        Tictactoe.printBoard(board);
                        determineState();
                        System.out.println(state.sysOutput());
                    }
                }

                if (state.gameOver()) {
                    break;
                }
            }
        }

         */
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/81/stages/449/implement
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/81/stages/449/implement">JetBrains
    Academy</a>
  time: Sat, 24 Oct 2020 17:45:47 UTC
record: -1
